// Generated by CoffeeScript 1.6.3
(function() {
  define(['data'], function(data) {
    var afterBooksLoad, afterEditLoad, afterNewLoad, global;
    global = this;
    afterBooksLoad = function() {
      var fillTable, registerActions;
      registerActions = function(row, book) {
        $('a.editLink', row).click(function() {
          return global.books.current = book;
        });
        return $('a.delLink', row).click(function() {
          data["delete"]('books', book._id).done(function(result) {
            alert('Book deleted: ' + result);
            return row.remove();
          }).fail(function(err) {
            return alert('Error: ' + err);
          });
          return false;
        });
      };
      fillTable = function() {
        return data.get('books').done(function(result) {
          var book, items, newRow, newRowElement, rows, _i, _len, _results;
          items = result.items;
          rows = $('#books tbody');
          _results = [];
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            book = items[_i];
            newRow = '<tr><td>' + book.title + '</td>';
            newRow += '<td>' + book.author + '</td>';
            newRow += '<td><a class=\'editLink\' href=\'#edit\'>Edit</a>';
            newRow += ' / <a class=\'delLink\' href=\'\'>Delete</a></td></tr>';
            newRowElement = $(newRow);
            registerActions(newRowElement, book);
            _results.push(rows.append(newRowElement));
          }
          return _results;
        }).fail(function(err) {
          return alert('Error: ' + err);
        });
      };
      return fillTable();
    };
    afterEditLoad = function() {
      if (!global.books || !global.books.current) {
        return;
      }
      $('#book_title').val(global.books.current.title);
      $('#book_author').val(global.books.current.author);
      return $('#book_edit').submit(function() {
        var putData;
        putData = {
          title: $('#book_title').val(),
          author: $('#book_author').val(),
          _id: global.books.current._id
        };
        data.put('books', putData).done(function() {
          return alert('Data Saved');
        }).fail(function() {
          return alert('Error while saving data');
        });
        return false;
      });
    };
    afterNewLoad = function() {
      return $('#book_new').submit(function() {
        var postData;
        postData = {
          title: $('#book_title').val(),
          author: $('#book_author').val()
        };
        data.post('books', postData).done(function() {
          return alert('New book added');
        }).fail(function() {
          return alert('Error while saving data');
        });
        return false;
      });
    };
    return {
      books: {
        afterLoad: afterBooksLoad
      },
      edit: {
        afterLoad: afterEditLoad
      },
      "new": {
        afterLoad: afterNewLoad
      }
    };
  });

}).call(this);
