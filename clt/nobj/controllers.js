// Generated by CoffeeScript 1.6.3
(function() {
  var ChainController, CreatingController, ListingController, UpdatingController, controllers, data, global, nobj;

  nobj = require('./nobj');

  data = require('./data');

  global = this;

  controllers = {};

  CreatingController = (function() {
    function CreatingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    CreatingController.prototype.afterLoad = function() {
      var form,
        _this = this;
      form = $(this.query);
      return form.submit(function() {
        nobj.post(form, _this.collection).done(function() {
          return alert('New item added');
        }).fail(function() {
          return alert('Error while adding item');
        });
        return false;
      });
    };

    return CreatingController;

  })();

  UpdatingController = (function() {
    function UpdatingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    UpdatingController.prototype.afterLoad = function() {
      var form,
        _this = this;
      form = $(this.query);
      nobj.obj2form(global.nobj.collections[this.collection].current, form);
      return form.submit(function() {
        nobj.put(form, _this.collection).done(function() {
          return alert('Item Saved');
        }).fail(function() {
          return alert('Error while updating item');
        });
        return false;
      });
    };

    return UpdatingController;

  })();

  ListingController = (function() {
    function ListingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    ListingController.prototype.afterLoad = function() {
      var _this = this;
      return data.get(this.collection).done(function(result) {
        return nobj.fillTable(_this.collection, result.items, $(_this.query));
      }).fail(function(err) {
        return alert('Error: ' + err);
      });
    };

    return ListingController;

  })();

  ChainController = (function() {
    function ChainController(controllers) {
      this.controllers = controllers;
    }

    ChainController.prototype.beforeLoad = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.beforeLoad === "function" ? controller.beforeLoad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.afterLoad = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.afterLoad === "function" ? controller.afterLoad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.beforeUnload = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.beforeUnlad === "function" ? controller.beforeUnlad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.afterUnload = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.afterUnload === "function" ? controller.afterUnload() : void 0);
      }
      return _results;
    };

    return ChainController;

  })();

  module.exports = {
    addCollection: function(collection) {
      global.nobj = global.nobj || {};
      global.nobj.collections = global.nobj.collections || {};
      global.nobj.collections[collection] = {};
      controllers[collection + '/list'] = new ListingController(collection, "#" + collection + "_list");
      controllers[collection + '/edit'] = new UpdatingController(collection, "#" + collection + "_edit");
      return controllers[collection + '/new'] = new CreatingController(collection, "#" + collection + "_new");
    },
    getController: function(viewId) {
      return controllers[viewId];
    },
    setController: function(viewId, controller) {
      return controllers[viewId] = controller;
    },
    ListingController: ListingController,
    UpdatingController: UpdatingController,
    CreatingController: CreatingController,
    ChainController: ChainController
  };

}).call(this);
