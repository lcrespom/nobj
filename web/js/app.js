;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var controllers, nav, userEditChain, users;

  nav = require('./nobj/nav');

  controllers = require('./nobj/controllers');

  users = require('./users');

  if (!window.console) {
    window.console = {
      log: function() {},
      warn: function() {},
      error: function() {}
    };
  }

  controllers.addCollection('books');

  controllers.addCollection('users');

  userEditChain = new controllers.ChainController([new users.UserEditController(), controllers.getController('users/edit')]);

  controllers.setController('users/edit', userEditChain);

  nav.getController = controllers.getController;

  nav.setNavigationArea('navArea', 'collections');

  $(function() {
    return nav.loadDefaultView();
  });

}).call(this);

},{"./nobj/controllers":2,"./nobj/nav":4,"./users":6}],2:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
(function() {
  var ChainController, CreatingController, ListingController, UpdatingController, controllers, data, global, nobj;

  nobj = require('./nobj');

  data = require('./data');

  global = this;

  controllers = {};

  CreatingController = (function() {
    function CreatingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    CreatingController.prototype.afterLoad = function() {
      var form,
        _this = this;
      form = $(this.query);
      return form.submit(function() {
        nobj.post(form, _this.collection).done(function() {
          return alert('New item added');
        }).fail(function() {
          return alert('Error while adding item');
        });
        return false;
      });
    };

    return CreatingController;

  })();

  UpdatingController = (function() {
    function UpdatingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    UpdatingController.prototype.afterLoad = function() {
      var form,
        _this = this;
      form = $(this.query);
      nobj.obj2form(global.nobj.collections[this.collection].current, form);
      return form.submit(function() {
        nobj.put(form, _this.collection).done(function() {
          return alert('Item Saved');
        }).fail(function() {
          return alert('Error while updating item');
        });
        return false;
      });
    };

    return UpdatingController;

  })();

  ListingController = (function() {
    function ListingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    ListingController.prototype.afterLoad = function() {
      var _this = this;
      return data.get(this.collection).done(function(result) {
        return nobj.fillTable(_this.collection, result.items, $(_this.query));
      }).fail(function(err) {
        return alert('Error: ' + err);
      });
    };

    return ListingController;

  })();

  ChainController = (function() {
    function ChainController(controllers) {
      this.controllers = controllers;
    }

    ChainController.prototype.beforeLoad = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.beforeLoad === "function" ? controller.beforeLoad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.afterLoad = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.afterLoad === "function" ? controller.afterLoad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.beforeUnload = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.beforeUnlad === "function" ? controller.beforeUnlad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.afterUnload = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.afterUnload === "function" ? controller.afterUnload() : void 0);
      }
      return _results;
    };

    return ChainController;

  })();

  module.exports = {
    addCollection: function(collection) {
      global.nobj = global.nobj || {};
      global.nobj.collections = global.nobj.collections || {};
      global.nobj.collections[collection] = {};
      controllers[collection + '/list'] = new ListingController(collection, "#" + collection + "_list");
      controllers[collection + '/edit'] = new UpdatingController(collection, "#" + collection + "_edit");
      return controllers[collection + '/new'] = new CreatingController(collection, "#" + collection + "_new");
    },
    getController: function(viewId) {
      return controllers[viewId];
    },
    setController: function(viewId, controller) {
      return controllers[viewId] = controller;
    },
    ListingController: ListingController,
    UpdatingController: UpdatingController,
    CreatingController: CreatingController,
    ChainController: ChainController
  };

}).call(this);

})()
},{"./data":3,"./nobj":5}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var ajax;

  ajax = function(collection, method, data) {
    var deferred;
    deferred = $.Deferred();
    data = data || {};
    if (data.constructor === String) {
      data += "&_method=" + method;
    } else {
      data._method = method;
    }
    $.ajax({
      type: 'POST',
      url: "/data/" + collection,
      data: data
    }).done(function(result) {
      if (result.err) {
        return deferred.reject(result.err);
      } else {
        return deferred.resolve(result);
      }
    }).fail(function(result) {
      return deferred.reject(result);
    });
    return deferred.promise();
  };

  module.exports = {
    get: function(collection) {
      return ajax(collection, 'get');
    },
    put: function(collection, putData) {
      return ajax(collection, 'put', putData);
    },
    post: function(collection, postData) {
      return ajax(collection, 'post', postData);
    },
    "delete": function(collection, oid) {
      var delData;
      delData = {
        _id: oid
      };
      return ajax(collection, 'delete', delData);
    }
  };

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var handleHistory, nav;

  nav = {
    oldViewId: '',
    navArea: null,
    history: {},
    setNavigationArea: function(elementId, defaultViewId) {
      return this.navArea = {
        id: elementId,
        defaultViewId: defaultViewId
      };
    },
    loadDefaultView: function() {
      return this.loadView(nav.navArea.defaultViewId);
    },
    loadView: function(viewId) {
      var oldController, url, _ref,
        _this = this;
      oldController = this.controller;
      this.controller = typeof this.getController === "function" ? this.getController(viewId) : void 0;
      if (!this.controller) {
        console.warn("No controller found for view '" + viewId + "'");
      }
      if (oldController != null) {
        if (typeof oldController.beforeUnload === "function") {
          oldController.beforeUnload(this.oldViewId);
        }
      }
      if ((_ref = this.controller) != null) {
        if (typeof _ref.beforeLoad === "function") {
          _ref.beforeLoad(viewId);
        }
      }
      url = viewId + '.html';
      return $('#' + this.navArea.id).load(url, function(text, status) {
        var _ref1;
        console.log('Loaded', url, '- status:', status);
        if (oldController != null) {
          if (typeof oldController.afterUnload === "function") {
            oldController.afterUnload(_this.oldViewId);
          }
        }
        if ((_ref1 = _this.controller) != null) {
          if (typeof _ref1.afterLoad === "function") {
            _ref1.afterLoad(viewId);
          }
        }
        return _this.oldViewId = viewId;
      });
    }
  };

  handleHistory = function(loc) {
    var navArea;
    navArea = nav.history[loc];
    if (navArea) {
      return nav.navArea = navArea;
    } else {
      return nav.history[loc] = nav.navArea;
    }
  };

  window.onhashchange = function() {
    var viewId;
    console.log('Hash changed to ' + location.hash);
    if (!nav.navArea) {
      console.error('Navigation module has not been initialized');
    }
    handleHistory(location.hash);
    if (location.hash.length <= 0) {
      viewId = nav.navArea.defaultViewId;
    } else {
      viewId = location.hash.substring(1);
    }
    return nav.loadView(viewId);
  };

  module.exports = nav;

}).call(this);

},{}],5:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
(function() {
  var DeleteActionHandler, EditActionHandler, actionHandlers, addActionHandler, data, getParentNode, global;

  data = require('./data');

  EditActionHandler = (function() {
    function EditActionHandler() {}

    EditActionHandler.prototype.actionMask = '$edit';

    EditActionHandler.prototype.getHTML = function(collection) {
      return '<a class="editLink" href="#' + collection + '/edit">Edit</a>';
    };

    EditActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.editLink', domNode).click(function() {
        return global.nobj.collections[collection].current = item;
      });
    };

    return EditActionHandler;

  })();

  DeleteActionHandler = (function() {
    function DeleteActionHandler() {}

    DeleteActionHandler.prototype.actionMask = '$delete';

    DeleteActionHandler.prototype.getHTML = function(collection) {
      return '<a class="delLink" href="">Delete</a>';
    };

    DeleteActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.delLink', domNode).click(function() {
        data["delete"](collection, item._id).done(function(result) {
          alert('Item deleted: ' + result.result);
          return $(getParentNode(domNode.get(0), 'TR')).remove();
        }).fail(function(err) {
          return alert('Error: ' + err);
        });
        return false;
      });
    };

    return DeleteActionHandler;

  })();

  global = this;

  actionHandlers = [];

  getParentNode = function(node, parentNodeName) {
    while (node && node.nodeName !== parentNodeName) {
      node = node.parentElement;
    }
    return node;
  };

  addActionHandler = function(actionHandler) {
    return actionHandlers.push(actionHandler);
  };

  addActionHandler(new EditActionHandler());

  addActionHandler(new DeleteActionHandler());

  module.exports = {
    parseTableHeaders: function(collection, table) {
      var colInfos, field, handlers, head, headNode, heads, i, mask, replaced, _i, _len, _ref;
      heads = $('thead tr th', table);
      colInfos = [];
      for (i = _i = 0, _len = heads.length; _i < _len; i = ++_i) {
        head = heads[i];
        headNode = $(head);
        field = headNode.attr('data-nobj-field');
        if (field) {
          colInfos.push({
            field: field
          });
        } else {
          mask = headNode.attr('data-nobj-actions');
          if (mask) {
            _ref = this.processHandlers(collection, mask), replaced = _ref[0], handlers = _ref[1];
            colInfos.push({
              html: replaced,
              handlers: handlers
            });
          } else {
            colInfos.push({});
          }
        }
      }
      return colInfos;
    },
    buildTableRow: function(collection, item, colInfos) {
      var cellNode, colInfo, handler, rowNode, _i, _j, _len, _len1, _ref;
      rowNode = $('<tr/>');
      for (_i = 0, _len = colInfos.length; _i < _len; _i++) {
        colInfo = colInfos[_i];
        cellNode = $('<td/>');
        if (colInfo.field) {
          cellNode.append(item[colInfo.field] || '');
        } else if (colInfo.handlers) {
          cellNode.append(colInfo.html);
          _ref = colInfo.handlers;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            handler = _ref[_j];
            handler.subscribe(collection, cellNode, item);
          }
        }
        rowNode.append(cellNode);
      }
      return rowNode;
    },
    fillTable: function(collection, items, table, rowcb) {
      var colInfos, item, rowNode, rows, _i, _len, _results;
      colInfos = this.parseTableHeaders(collection, table);
      rows = $('tbody', table);
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        rowNode = this.buildTableRow(collection, item, colInfos);
        if (typeof rowcb === "function") {
          rowcb(item, rowNode);
        }
        _results.push(rows.append(rowNode));
      }
      return _results;
    },
    obj2form: function(obj, form) {
      var input, jqInput, value, _i, _len, _ref, _results;
      _ref = $('[name]', form);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        jqInput = $(input);
        value = obj[jqInput.attr('name')];
        if (value) {
          _results.push(jqInput.val(value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    post: function(form, collection) {
      return data.post(collection, form.serialize());
    },
    put: function(form, collection) {
      return data.put(collection, form.serialize());
    },
    addActionHandler: addActionHandler,
    getParentNode: getParentNode,
    processHandlers: function(collection, mask) {
      var handler, handlers, _i, _len;
      handlers = [];
      for (_i = 0, _len = actionHandlers.length; _i < _len; _i++) {
        handler = actionHandlers[_i];
        if (mask.indexOf(handler.actionMask) >= 0) {
          mask = mask.replace(handler.actionMask, handler.getHTML(collection));
          handlers.push(handler);
        }
      }
      return [mask, handlers];
    }
  };

}).call(this);

})()
},{"./data":3}],6:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
(function() {
  var AddBookActionHandler, DelBookActionHandler, UserEditController, arrayContainsElement, data, global, nobj, removeArrayElement, reservedColInfo, reservedTbody, user;

  nobj = require('./nobj/nobj');

  data = require('./nobj/data');

  global = this;

  reservedColInfo = null;

  user = null;

  reservedTbody = null;

  removeArrayElement = function(a, e) {
    var elem, ret, _i, _len;
    ret = [];
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      elem = a[_i];
      if (elem !== e) {
        ret.push(elem);
      }
    }
    return ret;
  };

  arrayContainsElement = function(a, e) {
    var elem, _i, _len;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      elem = a[_i];
      if (elem === e) {
        return true;
      }
    }
    return false;
  };

  AddBookActionHandler = (function() {
    function AddBookActionHandler() {}

    AddBookActionHandler.prototype.actionMask = '$add-book';

    AddBookActionHandler.prototype.getHTML = function(collection) {
      return '<a class="addLink" href="#">Reserve</a>';
    };

    AddBookActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.addLink', domNode).click(function() {
        if (arrayContainsElement(user.books, item._id)) {
          return false;
        }
        user.books.push(item._id);
        reservedTbody.append(nobj.buildTableRow(collection, item, reservedColInfo));
        return false;
      });
    };

    return AddBookActionHandler;

  })();

  DelBookActionHandler = (function() {
    function DelBookActionHandler() {}

    DelBookActionHandler.prototype.actionMask = '$del-book';

    DelBookActionHandler.prototype.getHTML = function(collection) {
      return '<a class="delLink" href="#">Remove</a>';
    };

    DelBookActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.delLink', domNode).click(function() {
        user.books = removeArrayElement(user.books, item._id);
        $(nobj.getParentNode(domNode.get(0), 'TR')).remove();
        return false;
      });
    };

    return DelBookActionHandler;

  })();

  UserEditController = (function() {
    function UserEditController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    UserEditController.prototype.afterLoad = function() {
      user = global.nobj.collections.users.current;
      user.books = user.books || [];
      reservedColInfo = nobj.parseTableHeaders('books', $('#reserved_books_list'));
      reservedTbody = $('#reserved_books_list tbody');
      data.get('books').done(function(result) {
        return nobj.fillTable('books', result.items, $('#books_list'));
      }).fail(function(err) {
        return alert('Error: ' + err);
      });
      return $('#users_edit').submit(function() {});
    };

    return UserEditController;

  })();

  nobj.addActionHandler(new AddBookActionHandler());

  nobj.addActionHandler(new DelBookActionHandler());

  exports.UserEditController = UserEditController;

}).call(this);

})()
},{"./nobj/data":3,"./nobj/nobj":5}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyJDOlxcZGV2dG9vbHNcXG5vZGUtanMtdGVzdHNcXG5vYmpcXGNsdFxcbWFpbi5qcyIsIkM6XFxkZXZ0b29sc1xcbm9kZS1qcy10ZXN0c1xcbm9ialxcY2x0XFxub2JqXFxjb250cm9sbGVycy5qcyIsIkM6XFxkZXZ0b29sc1xcbm9kZS1qcy10ZXN0c1xcbm9ialxcY2x0XFxub2JqXFxkYXRhLmpzIiwiQzpcXGRldnRvb2xzXFxub2RlLWpzLXRlc3RzXFxub2JqXFxjbHRcXG5vYmpcXG5hdi5qcyIsIkM6XFxkZXZ0b29sc1xcbm9kZS1qcy10ZXN0c1xcbm9ialxcY2x0XFxub2JqXFxub2JqLmpzIiwiQzpcXGRldnRvb2xzXFxub2RlLWpzLXRlc3RzXFxub2JqXFxjbHRcXHVzZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjYuM1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgY29udHJvbGxlcnMsIG5hdiwgdXNlckVkaXRDaGFpbiwgdXNlcnM7XG5cbiAgbmF2ID0gcmVxdWlyZSgnLi9ub2JqL25hdicpO1xuXG4gIGNvbnRyb2xsZXJzID0gcmVxdWlyZSgnLi9ub2JqL2NvbnRyb2xsZXJzJyk7XG5cbiAgdXNlcnMgPSByZXF1aXJlKCcuL3VzZXJzJyk7XG5cbiAgaWYgKCF3aW5kb3cuY29uc29sZSkge1xuICAgIHdpbmRvdy5jb25zb2xlID0ge1xuICAgICAgbG9nOiBmdW5jdGlvbigpIHt9LFxuICAgICAgd2FybjogZnVuY3Rpb24oKSB7fSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbigpIHt9XG4gICAgfTtcbiAgfVxuXG4gIGNvbnRyb2xsZXJzLmFkZENvbGxlY3Rpb24oJ2Jvb2tzJyk7XG5cbiAgY29udHJvbGxlcnMuYWRkQ29sbGVjdGlvbigndXNlcnMnKTtcblxuICB1c2VyRWRpdENoYWluID0gbmV3IGNvbnRyb2xsZXJzLkNoYWluQ29udHJvbGxlcihbbmV3IHVzZXJzLlVzZXJFZGl0Q29udHJvbGxlcigpLCBjb250cm9sbGVycy5nZXRDb250cm9sbGVyKCd1c2Vycy9lZGl0JyldKTtcblxuICBjb250cm9sbGVycy5zZXRDb250cm9sbGVyKCd1c2Vycy9lZGl0JywgdXNlckVkaXRDaGFpbik7XG5cbiAgbmF2LmdldENvbnRyb2xsZXIgPSBjb250cm9sbGVycy5nZXRDb250cm9sbGVyO1xuXG4gIG5hdi5zZXROYXZpZ2F0aW9uQXJlYSgnbmF2QXJlYScsICdjb2xsZWN0aW9ucycpO1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5hdi5sb2FkRGVmYXVsdFZpZXcoKTtcbiAgfSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIoZnVuY3Rpb24oKXsvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNi4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBDaGFpbkNvbnRyb2xsZXIsIENyZWF0aW5nQ29udHJvbGxlciwgTGlzdGluZ0NvbnRyb2xsZXIsIFVwZGF0aW5nQ29udHJvbGxlciwgY29udHJvbGxlcnMsIGRhdGEsIGdsb2JhbCwgbm9iajtcblxuICBub2JqID0gcmVxdWlyZSgnLi9ub2JqJyk7XG5cbiAgZGF0YSA9IHJlcXVpcmUoJy4vZGF0YScpO1xuXG4gIGdsb2JhbCA9IHRoaXM7XG5cbiAgY29udHJvbGxlcnMgPSB7fTtcblxuICBDcmVhdGluZ0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gQ3JlYXRpbmdDb250cm9sbGVyKGNvbGxlY3Rpb24sIHF1ZXJ5KSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIH1cblxuICAgIENyZWF0aW5nQ29udHJvbGxlci5wcm90b3R5cGUuYWZ0ZXJMb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZm9ybSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgZm9ybSA9ICQodGhpcy5xdWVyeSk7XG4gICAgICByZXR1cm4gZm9ybS5zdWJtaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIG5vYmoucG9zdChmb3JtLCBfdGhpcy5jb2xsZWN0aW9uKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhbGVydCgnTmV3IGl0ZW0gYWRkZWQnKTtcbiAgICAgICAgfSkuZmFpbChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYWxlcnQoJ0Vycm9yIHdoaWxlIGFkZGluZyBpdGVtJyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENyZWF0aW5nQ29udHJvbGxlcjtcblxuICB9KSgpO1xuXG4gIFVwZGF0aW5nQ29udHJvbGxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBVcGRhdGluZ0NvbnRyb2xsZXIoY29sbGVjdGlvbiwgcXVlcnkpIHtcbiAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgfVxuXG4gICAgVXBkYXRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5hZnRlckxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBmb3JtLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICBmb3JtID0gJCh0aGlzLnF1ZXJ5KTtcbiAgICAgIG5vYmoub2JqMmZvcm0oZ2xvYmFsLm5vYmouY29sbGVjdGlvbnNbdGhpcy5jb2xsZWN0aW9uXS5jdXJyZW50LCBmb3JtKTtcbiAgICAgIHJldHVybiBmb3JtLnN1Ym1pdChmdW5jdGlvbigpIHtcbiAgICAgICAgbm9iai5wdXQoZm9ybSwgX3RoaXMuY29sbGVjdGlvbikuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYWxlcnQoJ0l0ZW0gU2F2ZWQnKTtcbiAgICAgICAgfSkuZmFpbChmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYWxlcnQoJ0Vycm9yIHdoaWxlIHVwZGF0aW5nIGl0ZW0nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gVXBkYXRpbmdDb250cm9sbGVyO1xuXG4gIH0pKCk7XG5cbiAgTGlzdGluZ0NvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gTGlzdGluZ0NvbnRyb2xsZXIoY29sbGVjdGlvbiwgcXVlcnkpIHtcbiAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgfVxuXG4gICAgTGlzdGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLmFmdGVyTG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHJldHVybiBkYXRhLmdldCh0aGlzLmNvbGxlY3Rpb24pLmRvbmUoZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBub2JqLmZpbGxUYWJsZShfdGhpcy5jb2xsZWN0aW9uLCByZXN1bHQuaXRlbXMsICQoX3RoaXMucXVlcnkpKTtcbiAgICAgIH0pLmZhaWwoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHJldHVybiBhbGVydCgnRXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBMaXN0aW5nQ29udHJvbGxlcjtcblxuICB9KSgpO1xuXG4gIENoYWluQ29udHJvbGxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBDaGFpbkNvbnRyb2xsZXIoY29udHJvbGxlcnMpIHtcbiAgICAgIHRoaXMuY29udHJvbGxlcnMgPSBjb250cm9sbGVycztcbiAgICB9XG5cbiAgICBDaGFpbkNvbnRyb2xsZXIucHJvdG90eXBlLmJlZm9yZUxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb250cm9sbGVyLCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7XG4gICAgICBfcmVmID0gdGhpcy5jb250cm9sbGVycztcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgY29udHJvbGxlciA9IF9yZWZbX2ldO1xuICAgICAgICBfcmVzdWx0cy5wdXNoKHR5cGVvZiBjb250cm9sbGVyLmJlZm9yZUxvYWQgPT09IFwiZnVuY3Rpb25cIiA/IGNvbnRyb2xsZXIuYmVmb3JlTG9hZCgpIDogdm9pZCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9O1xuXG4gICAgQ2hhaW5Db250cm9sbGVyLnByb3RvdHlwZS5hZnRlckxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb250cm9sbGVyLCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7XG4gICAgICBfcmVmID0gdGhpcy5jb250cm9sbGVycztcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgY29udHJvbGxlciA9IF9yZWZbX2ldO1xuICAgICAgICBfcmVzdWx0cy5wdXNoKHR5cGVvZiBjb250cm9sbGVyLmFmdGVyTG9hZCA9PT0gXCJmdW5jdGlvblwiID8gY29udHJvbGxlci5hZnRlckxvYWQoKSA6IHZvaWQgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgfTtcblxuICAgIENoYWluQ29udHJvbGxlci5wcm90b3R5cGUuYmVmb3JlVW5sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29udHJvbGxlciwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzO1xuICAgICAgX3JlZiA9IHRoaXMuY29udHJvbGxlcnM7XG4gICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIGNvbnRyb2xsZXIgPSBfcmVmW19pXTtcbiAgICAgICAgX3Jlc3VsdHMucHVzaCh0eXBlb2YgY29udHJvbGxlci5iZWZvcmVVbmxhZCA9PT0gXCJmdW5jdGlvblwiID8gY29udHJvbGxlci5iZWZvcmVVbmxhZCgpIDogdm9pZCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9O1xuXG4gICAgQ2hhaW5Db250cm9sbGVyLnByb3RvdHlwZS5hZnRlclVubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNvbnRyb2xsZXIsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0cztcbiAgICAgIF9yZWYgPSB0aGlzLmNvbnRyb2xsZXJzO1xuICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBjb250cm9sbGVyID0gX3JlZltfaV07XG4gICAgICAgIF9yZXN1bHRzLnB1c2godHlwZW9mIGNvbnRyb2xsZXIuYWZ0ZXJVbmxvYWQgPT09IFwiZnVuY3Rpb25cIiA/IGNvbnRyb2xsZXIuYWZ0ZXJVbmxvYWQoKSA6IHZvaWQgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgfTtcblxuICAgIHJldHVybiBDaGFpbkNvbnRyb2xsZXI7XG5cbiAgfSkoKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhZGRDb2xsZWN0aW9uOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICBnbG9iYWwubm9iaiA9IGdsb2JhbC5ub2JqIHx8IHt9O1xuICAgICAgZ2xvYmFsLm5vYmouY29sbGVjdGlvbnMgPSBnbG9iYWwubm9iai5jb2xsZWN0aW9ucyB8fCB7fTtcbiAgICAgIGdsb2JhbC5ub2JqLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25dID0ge307XG4gICAgICBjb250cm9sbGVyc1tjb2xsZWN0aW9uICsgJy9saXN0J10gPSBuZXcgTGlzdGluZ0NvbnRyb2xsZXIoY29sbGVjdGlvbiwgXCIjXCIgKyBjb2xsZWN0aW9uICsgXCJfbGlzdFwiKTtcbiAgICAgIGNvbnRyb2xsZXJzW2NvbGxlY3Rpb24gKyAnL2VkaXQnXSA9IG5ldyBVcGRhdGluZ0NvbnRyb2xsZXIoY29sbGVjdGlvbiwgXCIjXCIgKyBjb2xsZWN0aW9uICsgXCJfZWRpdFwiKTtcbiAgICAgIHJldHVybiBjb250cm9sbGVyc1tjb2xsZWN0aW9uICsgJy9uZXcnXSA9IG5ldyBDcmVhdGluZ0NvbnRyb2xsZXIoY29sbGVjdGlvbiwgXCIjXCIgKyBjb2xsZWN0aW9uICsgXCJfbmV3XCIpO1xuICAgIH0sXG4gICAgZ2V0Q29udHJvbGxlcjogZnVuY3Rpb24odmlld0lkKSB7XG4gICAgICByZXR1cm4gY29udHJvbGxlcnNbdmlld0lkXTtcbiAgICB9LFxuICAgIHNldENvbnRyb2xsZXI6IGZ1bmN0aW9uKHZpZXdJZCwgY29udHJvbGxlcikge1xuICAgICAgcmV0dXJuIGNvbnRyb2xsZXJzW3ZpZXdJZF0gPSBjb250cm9sbGVyO1xuICAgIH0sXG4gICAgTGlzdGluZ0NvbnRyb2xsZXI6IExpc3RpbmdDb250cm9sbGVyLFxuICAgIFVwZGF0aW5nQ29udHJvbGxlcjogVXBkYXRpbmdDb250cm9sbGVyLFxuICAgIENyZWF0aW5nQ29udHJvbGxlcjogQ3JlYXRpbmdDb250cm9sbGVyLFxuICAgIENoYWluQ29udHJvbGxlcjogQ2hhaW5Db250cm9sbGVyXG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG5cbn0pKCkiLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNi4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBhamF4O1xuXG4gIGFqYXggPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBtZXRob2QsIGRhdGEpIHtcbiAgICB2YXIgZGVmZXJyZWQ7XG4gICAgZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgaWYgKGRhdGEuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xuICAgICAgZGF0YSArPSBcIiZfbWV0aG9kPVwiICsgbWV0aG9kO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLl9tZXRob2QgPSBtZXRob2Q7XG4gICAgfVxuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICB1cmw6IFwiL2RhdGEvXCIgKyBjb2xsZWN0aW9uLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pLmRvbmUoZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICBpZiAocmVzdWx0LmVycikge1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucmVqZWN0KHJlc3VsdC5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9KS5mYWlsKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnJlamVjdChyZXN1bHQpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gYWpheChjb2xsZWN0aW9uLCAnZ2V0Jyk7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHB1dERhdGEpIHtcbiAgICAgIHJldHVybiBhamF4KGNvbGxlY3Rpb24sICdwdXQnLCBwdXREYXRhKTtcbiAgICB9LFxuICAgIHBvc3Q6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBvc3REYXRhKSB7XG4gICAgICByZXR1cm4gYWpheChjb2xsZWN0aW9uLCAncG9zdCcsIHBvc3REYXRhKTtcbiAgICB9LFxuICAgIFwiZGVsZXRlXCI6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIG9pZCkge1xuICAgICAgdmFyIGRlbERhdGE7XG4gICAgICBkZWxEYXRhID0ge1xuICAgICAgICBfaWQ6IG9pZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBhamF4KGNvbGxlY3Rpb24sICdkZWxldGUnLCBkZWxEYXRhKTtcbiAgICB9XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iLCIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuNi4zXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBoYW5kbGVIaXN0b3J5LCBuYXY7XG5cbiAgbmF2ID0ge1xuICAgIG9sZFZpZXdJZDogJycsXG4gICAgbmF2QXJlYTogbnVsbCxcbiAgICBoaXN0b3J5OiB7fSxcbiAgICBzZXROYXZpZ2F0aW9uQXJlYTogZnVuY3Rpb24oZWxlbWVudElkLCBkZWZhdWx0Vmlld0lkKSB7XG4gICAgICByZXR1cm4gdGhpcy5uYXZBcmVhID0ge1xuICAgICAgICBpZDogZWxlbWVudElkLFxuICAgICAgICBkZWZhdWx0Vmlld0lkOiBkZWZhdWx0Vmlld0lkXG4gICAgICB9O1xuICAgIH0sXG4gICAgbG9hZERlZmF1bHRWaWV3OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvYWRWaWV3KG5hdi5uYXZBcmVhLmRlZmF1bHRWaWV3SWQpO1xuICAgIH0sXG4gICAgbG9hZFZpZXc6IGZ1bmN0aW9uKHZpZXdJZCkge1xuICAgICAgdmFyIG9sZENvbnRyb2xsZXIsIHVybCwgX3JlZixcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAgb2xkQ29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcjtcbiAgICAgIHRoaXMuY29udHJvbGxlciA9IHR5cGVvZiB0aGlzLmdldENvbnRyb2xsZXIgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXMuZ2V0Q29udHJvbGxlcih2aWV3SWQpIDogdm9pZCAwO1xuICAgICAgaWYgKCF0aGlzLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTm8gY29udHJvbGxlciBmb3VuZCBmb3IgdmlldyAnXCIgKyB2aWV3SWQgKyBcIidcIik7XG4gICAgICB9XG4gICAgICBpZiAob2xkQ29udHJvbGxlciAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2xkQ29udHJvbGxlci5iZWZvcmVVbmxvYWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIG9sZENvbnRyb2xsZXIuYmVmb3JlVW5sb2FkKHRoaXMub2xkVmlld0lkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKChfcmVmID0gdGhpcy5jb250cm9sbGVyKSAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgX3JlZi5iZWZvcmVMb2FkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBfcmVmLmJlZm9yZUxvYWQodmlld0lkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXJsID0gdmlld0lkICsgJy5odG1sJztcbiAgICAgIHJldHVybiAkKCcjJyArIHRoaXMubmF2QXJlYS5pZCkubG9hZCh1cmwsIGZ1bmN0aW9uKHRleHQsIHN0YXR1cykge1xuICAgICAgICB2YXIgX3JlZjE7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkZWQnLCB1cmwsICctIHN0YXR1czonLCBzdGF0dXMpO1xuICAgICAgICBpZiAob2xkQ29udHJvbGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvbGRDb250cm9sbGVyLmFmdGVyVW5sb2FkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIG9sZENvbnRyb2xsZXIuYWZ0ZXJVbmxvYWQoX3RoaXMub2xkVmlld0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChfcmVmMSA9IF90aGlzLmNvbnRyb2xsZXIpICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIF9yZWYxLmFmdGVyTG9hZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBfcmVmMS5hZnRlckxvYWQodmlld0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzLm9sZFZpZXdJZCA9IHZpZXdJZDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVIaXN0b3J5ID0gZnVuY3Rpb24obG9jKSB7XG4gICAgdmFyIG5hdkFyZWE7XG4gICAgbmF2QXJlYSA9IG5hdi5oaXN0b3J5W2xvY107XG4gICAgaWYgKG5hdkFyZWEpIHtcbiAgICAgIHJldHVybiBuYXYubmF2QXJlYSA9IG5hdkFyZWE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuYXYuaGlzdG9yeVtsb2NdID0gbmF2Lm5hdkFyZWE7XG4gICAgfVxuICB9O1xuXG4gIHdpbmRvdy5vbmhhc2hjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld0lkO1xuICAgIGNvbnNvbGUubG9nKCdIYXNoIGNoYW5nZWQgdG8gJyArIGxvY2F0aW9uLmhhc2gpO1xuICAgIGlmICghbmF2Lm5hdkFyZWEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05hdmlnYXRpb24gbW9kdWxlIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCcpO1xuICAgIH1cbiAgICBoYW5kbGVIaXN0b3J5KGxvY2F0aW9uLmhhc2gpO1xuICAgIGlmIChsb2NhdGlvbi5oYXNoLmxlbmd0aCA8PSAwKSB7XG4gICAgICB2aWV3SWQgPSBuYXYubmF2QXJlYS5kZWZhdWx0Vmlld0lkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aWV3SWQgPSBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdi5sb2FkVmlldyh2aWV3SWQpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gbmF2O1xuXG59KS5jYWxsKHRoaXMpO1xuIiwiKGZ1bmN0aW9uKCl7Ly8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjYuM1xuKGZ1bmN0aW9uKCkge1xuICB2YXIgRGVsZXRlQWN0aW9uSGFuZGxlciwgRWRpdEFjdGlvbkhhbmRsZXIsIGFjdGlvbkhhbmRsZXJzLCBhZGRBY3Rpb25IYW5kbGVyLCBkYXRhLCBnZXRQYXJlbnROb2RlLCBnbG9iYWw7XG5cbiAgZGF0YSA9IHJlcXVpcmUoJy4vZGF0YScpO1xuXG4gIEVkaXRBY3Rpb25IYW5kbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEVkaXRBY3Rpb25IYW5kbGVyKCkge31cblxuICAgIEVkaXRBY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5hY3Rpb25NYXNrID0gJyRlZGl0JztcblxuICAgIEVkaXRBY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5nZXRIVE1MID0gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuICc8YSBjbGFzcz1cImVkaXRMaW5rXCIgaHJlZj1cIiMnICsgY29sbGVjdGlvbiArICcvZWRpdFwiPkVkaXQ8L2E+JztcbiAgICB9O1xuXG4gICAgRWRpdEFjdGlvbkhhbmRsZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGRvbU5vZGUsIGl0ZW0pIHtcbiAgICAgIHJldHVybiAkKCdhLmVkaXRMaW5rJywgZG9tTm9kZSkuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWwubm9iai5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uXS5jdXJyZW50ID0gaXRlbTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gRWRpdEFjdGlvbkhhbmRsZXI7XG5cbiAgfSkoKTtcblxuICBEZWxldGVBY3Rpb25IYW5kbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIERlbGV0ZUFjdGlvbkhhbmRsZXIoKSB7fVxuXG4gICAgRGVsZXRlQWN0aW9uSGFuZGxlci5wcm90b3R5cGUuYWN0aW9uTWFzayA9ICckZGVsZXRlJztcblxuICAgIERlbGV0ZUFjdGlvbkhhbmRsZXIucHJvdG90eXBlLmdldEhUTUwgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gJzxhIGNsYXNzPVwiZGVsTGlua1wiIGhyZWY9XCJcIj5EZWxldGU8L2E+JztcbiAgICB9O1xuXG4gICAgRGVsZXRlQWN0aW9uSGFuZGxlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgZG9tTm9kZSwgaXRlbSkge1xuICAgICAgcmV0dXJuICQoJ2EuZGVsTGluaycsIGRvbU5vZGUpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBkYXRhW1wiZGVsZXRlXCJdKGNvbGxlY3Rpb24sIGl0ZW0uX2lkKS5kb25lKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIGFsZXJ0KCdJdGVtIGRlbGV0ZWQ6ICcgKyByZXN1bHQucmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gJChnZXRQYXJlbnROb2RlKGRvbU5vZGUuZ2V0KDApLCAnVFInKSkucmVtb3ZlKCk7XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIGFsZXJ0KCdFcnJvcjogJyArIGVycik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIERlbGV0ZUFjdGlvbkhhbmRsZXI7XG5cbiAgfSkoKTtcblxuICBnbG9iYWwgPSB0aGlzO1xuXG4gIGFjdGlvbkhhbmRsZXJzID0gW107XG5cbiAgZ2V0UGFyZW50Tm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHBhcmVudE5vZGVOYW1lKSB7XG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5ub2RlTmFtZSAhPT0gcGFyZW50Tm9kZU5hbWUpIHtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGFkZEFjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbihhY3Rpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIGFjdGlvbkhhbmRsZXJzLnB1c2goYWN0aW9uSGFuZGxlcik7XG4gIH07XG5cbiAgYWRkQWN0aW9uSGFuZGxlcihuZXcgRWRpdEFjdGlvbkhhbmRsZXIoKSk7XG5cbiAgYWRkQWN0aW9uSGFuZGxlcihuZXcgRGVsZXRlQWN0aW9uSGFuZGxlcigpKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBwYXJzZVRhYmxlSGVhZGVyczogZnVuY3Rpb24oY29sbGVjdGlvbiwgdGFibGUpIHtcbiAgICAgIHZhciBjb2xJbmZvcywgZmllbGQsIGhhbmRsZXJzLCBoZWFkLCBoZWFkTm9kZSwgaGVhZHMsIGksIG1hc2ssIHJlcGxhY2VkLCBfaSwgX2xlbiwgX3JlZjtcbiAgICAgIGhlYWRzID0gJCgndGhlYWQgdHIgdGgnLCB0YWJsZSk7XG4gICAgICBjb2xJbmZvcyA9IFtdO1xuICAgICAgZm9yIChpID0gX2kgPSAwLCBfbGVuID0gaGVhZHMubGVuZ3RoOyBfaSA8IF9sZW47IGkgPSArK19pKSB7XG4gICAgICAgIGhlYWQgPSBoZWFkc1tpXTtcbiAgICAgICAgaGVhZE5vZGUgPSAkKGhlYWQpO1xuICAgICAgICBmaWVsZCA9IGhlYWROb2RlLmF0dHIoJ2RhdGEtbm9iai1maWVsZCcpO1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICBjb2xJbmZvcy5wdXNoKHtcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hc2sgPSBoZWFkTm9kZS5hdHRyKCdkYXRhLW5vYmotYWN0aW9ucycpO1xuICAgICAgICAgIGlmIChtYXNrKSB7XG4gICAgICAgICAgICBfcmVmID0gdGhpcy5wcm9jZXNzSGFuZGxlcnMoY29sbGVjdGlvbiwgbWFzayksIHJlcGxhY2VkID0gX3JlZlswXSwgaGFuZGxlcnMgPSBfcmVmWzFdO1xuICAgICAgICAgICAgY29sSW5mb3MucHVzaCh7XG4gICAgICAgICAgICAgIGh0bWw6IHJlcGxhY2VkLFxuICAgICAgICAgICAgICBoYW5kbGVyczogaGFuZGxlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2xJbmZvcy5wdXNoKHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2xJbmZvcztcbiAgICB9LFxuICAgIGJ1aWxkVGFibGVSb3c6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZW0sIGNvbEluZm9zKSB7XG4gICAgICB2YXIgY2VsbE5vZGUsIGNvbEluZm8sIGhhbmRsZXIsIHJvd05vZGUsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWY7XG4gICAgICByb3dOb2RlID0gJCgnPHRyLz4nKTtcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gY29sSW5mb3MubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgY29sSW5mbyA9IGNvbEluZm9zW19pXTtcbiAgICAgICAgY2VsbE5vZGUgPSAkKCc8dGQvPicpO1xuICAgICAgICBpZiAoY29sSW5mby5maWVsZCkge1xuICAgICAgICAgIGNlbGxOb2RlLmFwcGVuZChpdGVtW2NvbEluZm8uZmllbGRdIHx8ICcnKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xJbmZvLmhhbmRsZXJzKSB7XG4gICAgICAgICAgY2VsbE5vZGUuYXBwZW5kKGNvbEluZm8uaHRtbCk7XG4gICAgICAgICAgX3JlZiA9IGNvbEluZm8uaGFuZGxlcnM7XG4gICAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZi5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBfcmVmW19qXTtcbiAgICAgICAgICAgIGhhbmRsZXIuc3Vic2NyaWJlKGNvbGxlY3Rpb24sIGNlbGxOb2RlLCBpdGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcm93Tm9kZS5hcHBlbmQoY2VsbE5vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvd05vZGU7XG4gICAgfSxcbiAgICBmaWxsVGFibGU6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZW1zLCB0YWJsZSwgcm93Y2IpIHtcbiAgICAgIHZhciBjb2xJbmZvcywgaXRlbSwgcm93Tm9kZSwgcm93cywgX2ksIF9sZW4sIF9yZXN1bHRzO1xuICAgICAgY29sSW5mb3MgPSB0aGlzLnBhcnNlVGFibGVIZWFkZXJzKGNvbGxlY3Rpb24sIHRhYmxlKTtcbiAgICAgIHJvd3MgPSAkKCd0Ym9keScsIHRhYmxlKTtcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGl0ZW1zLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtc1tfaV07XG4gICAgICAgIHJvd05vZGUgPSB0aGlzLmJ1aWxkVGFibGVSb3coY29sbGVjdGlvbiwgaXRlbSwgY29sSW5mb3MpO1xuICAgICAgICBpZiAodHlwZW9mIHJvd2NiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICByb3djYihpdGVtLCByb3dOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBfcmVzdWx0cy5wdXNoKHJvd3MuYXBwZW5kKHJvd05vZGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9LFxuICAgIG9iajJmb3JtOiBmdW5jdGlvbihvYmosIGZvcm0pIHtcbiAgICAgIHZhciBpbnB1dCwganFJbnB1dCwgdmFsdWUsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0cztcbiAgICAgIF9yZWYgPSAkKCdbbmFtZV0nLCBmb3JtKTtcbiAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgaW5wdXQgPSBfcmVmW19pXTtcbiAgICAgICAganFJbnB1dCA9ICQoaW5wdXQpO1xuICAgICAgICB2YWx1ZSA9IG9ialtqcUlucHV0LmF0dHIoJ25hbWUnKV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIF9yZXN1bHRzLnB1c2goanFJbnB1dC52YWwodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9LFxuICAgIHBvc3Q6IGZ1bmN0aW9uKGZvcm0sIGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBkYXRhLnBvc3QoY29sbGVjdGlvbiwgZm9ybS5zZXJpYWxpemUoKSk7XG4gICAgfSxcbiAgICBwdXQ6IGZ1bmN0aW9uKGZvcm0sIGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBkYXRhLnB1dChjb2xsZWN0aW9uLCBmb3JtLnNlcmlhbGl6ZSgpKTtcbiAgICB9LFxuICAgIGFkZEFjdGlvbkhhbmRsZXI6IGFkZEFjdGlvbkhhbmRsZXIsXG4gICAgZ2V0UGFyZW50Tm9kZTogZ2V0UGFyZW50Tm9kZSxcbiAgICBwcm9jZXNzSGFuZGxlcnM6IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIG1hc2spIHtcbiAgICAgIHZhciBoYW5kbGVyLCBoYW5kbGVycywgX2ksIF9sZW47XG4gICAgICBoYW5kbGVycyA9IFtdO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBhY3Rpb25IYW5kbGVycy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBoYW5kbGVyID0gYWN0aW9uSGFuZGxlcnNbX2ldO1xuICAgICAgICBpZiAobWFzay5pbmRleE9mKGhhbmRsZXIuYWN0aW9uTWFzaykgPj0gMCkge1xuICAgICAgICAgIG1hc2sgPSBtYXNrLnJlcGxhY2UoaGFuZGxlci5hY3Rpb25NYXNrLCBoYW5kbGVyLmdldEhUTUwoY29sbGVjdGlvbikpO1xuICAgICAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBbbWFzaywgaGFuZGxlcnNdO1xuICAgIH1cbiAgfTtcblxufSkuY2FsbCh0aGlzKTtcblxufSkoKSIsIihmdW5jdGlvbigpey8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS42LjNcbihmdW5jdGlvbigpIHtcbiAgdmFyIEFkZEJvb2tBY3Rpb25IYW5kbGVyLCBEZWxCb29rQWN0aW9uSGFuZGxlciwgVXNlckVkaXRDb250cm9sbGVyLCBhcnJheUNvbnRhaW5zRWxlbWVudCwgZGF0YSwgZ2xvYmFsLCBub2JqLCByZW1vdmVBcnJheUVsZW1lbnQsIHJlc2VydmVkQ29sSW5mbywgcmVzZXJ2ZWRUYm9keSwgdXNlcjtcblxuICBub2JqID0gcmVxdWlyZSgnLi9ub2JqL25vYmonKTtcblxuICBkYXRhID0gcmVxdWlyZSgnLi9ub2JqL2RhdGEnKTtcblxuICBnbG9iYWwgPSB0aGlzO1xuXG4gIHJlc2VydmVkQ29sSW5mbyA9IG51bGw7XG5cbiAgdXNlciA9IG51bGw7XG5cbiAgcmVzZXJ2ZWRUYm9keSA9IG51bGw7XG5cbiAgcmVtb3ZlQXJyYXlFbGVtZW50ID0gZnVuY3Rpb24oYSwgZSkge1xuICAgIHZhciBlbGVtLCByZXQsIF9pLCBfbGVuO1xuICAgIHJldCA9IFtdO1xuICAgIGZvciAoX2kgPSAwLCBfbGVuID0gYS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgZWxlbSA9IGFbX2ldO1xuICAgICAgaWYgKGVsZW0gIT09IGUpIHtcbiAgICAgICAgcmV0LnB1c2goZWxlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgYXJyYXlDb250YWluc0VsZW1lbnQgPSBmdW5jdGlvbihhLCBlKSB7XG4gICAgdmFyIGVsZW0sIF9pLCBfbGVuO1xuICAgIGZvciAoX2kgPSAwLCBfbGVuID0gYS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgZWxlbSA9IGFbX2ldO1xuICAgICAgaWYgKGVsZW0gPT09IGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBZGRCb29rQWN0aW9uSGFuZGxlciA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBBZGRCb29rQWN0aW9uSGFuZGxlcigpIHt9XG5cbiAgICBBZGRCb29rQWN0aW9uSGFuZGxlci5wcm90b3R5cGUuYWN0aW9uTWFzayA9ICckYWRkLWJvb2snO1xuXG4gICAgQWRkQm9va0FjdGlvbkhhbmRsZXIucHJvdG90eXBlLmdldEhUTUwgPSBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gJzxhIGNsYXNzPVwiYWRkTGlua1wiIGhyZWY9XCIjXCI+UmVzZXJ2ZTwvYT4nO1xuICAgIH07XG5cbiAgICBBZGRCb29rQWN0aW9uSGFuZGxlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgZG9tTm9kZSwgaXRlbSkge1xuICAgICAgcmV0dXJuICQoJ2EuYWRkTGluaycsIGRvbU5vZGUpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYXJyYXlDb250YWluc0VsZW1lbnQodXNlci5ib29rcywgaXRlbS5faWQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVzZXIuYm9va3MucHVzaChpdGVtLl9pZCk7XG4gICAgICAgIHJlc2VydmVkVGJvZHkuYXBwZW5kKG5vYmouYnVpbGRUYWJsZVJvdyhjb2xsZWN0aW9uLCBpdGVtLCByZXNlcnZlZENvbEluZm8pKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBBZGRCb29rQWN0aW9uSGFuZGxlcjtcblxuICB9KSgpO1xuXG4gIERlbEJvb2tBY3Rpb25IYW5kbGVyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIERlbEJvb2tBY3Rpb25IYW5kbGVyKCkge31cblxuICAgIERlbEJvb2tBY3Rpb25IYW5kbGVyLnByb3RvdHlwZS5hY3Rpb25NYXNrID0gJyRkZWwtYm9vayc7XG5cbiAgICBEZWxCb29rQWN0aW9uSGFuZGxlci5wcm90b3R5cGUuZ2V0SFRNTCA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiAnPGEgY2xhc3M9XCJkZWxMaW5rXCIgaHJlZj1cIiNcIj5SZW1vdmU8L2E+JztcbiAgICB9O1xuXG4gICAgRGVsQm9va0FjdGlvbkhhbmRsZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGRvbU5vZGUsIGl0ZW0pIHtcbiAgICAgIHJldHVybiAkKCdhLmRlbExpbmsnLCBkb21Ob2RlKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgdXNlci5ib29rcyA9IHJlbW92ZUFycmF5RWxlbWVudCh1c2VyLmJvb2tzLCBpdGVtLl9pZCk7XG4gICAgICAgICQobm9iai5nZXRQYXJlbnROb2RlKGRvbU5vZGUuZ2V0KDApLCAnVFInKSkucmVtb3ZlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gRGVsQm9va0FjdGlvbkhhbmRsZXI7XG5cbiAgfSkoKTtcblxuICBVc2VyRWRpdENvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVXNlckVkaXRDb250cm9sbGVyKGNvbGxlY3Rpb24sIHF1ZXJ5KSB7XG4gICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIH1cblxuICAgIFVzZXJFZGl0Q29udHJvbGxlci5wcm90b3R5cGUuYWZ0ZXJMb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB1c2VyID0gZ2xvYmFsLm5vYmouY29sbGVjdGlvbnMudXNlcnMuY3VycmVudDtcbiAgICAgIHVzZXIuYm9va3MgPSB1c2VyLmJvb2tzIHx8IFtdO1xuICAgICAgcmVzZXJ2ZWRDb2xJbmZvID0gbm9iai5wYXJzZVRhYmxlSGVhZGVycygnYm9va3MnLCAkKCcjcmVzZXJ2ZWRfYm9va3NfbGlzdCcpKTtcbiAgICAgIHJlc2VydmVkVGJvZHkgPSAkKCcjcmVzZXJ2ZWRfYm9va3NfbGlzdCB0Ym9keScpO1xuICAgICAgZGF0YS5nZXQoJ2Jvb2tzJykuZG9uZShmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG5vYmouZmlsbFRhYmxlKCdib29rcycsIHJlc3VsdC5pdGVtcywgJCgnI2Jvb2tzX2xpc3QnKSk7XG4gICAgICB9KS5mYWlsKGZ1bmN0aW9uKGVycikge1xuICAgICAgICByZXR1cm4gYWxlcnQoJ0Vycm9yOiAnICsgZXJyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICQoJyN1c2Vyc19lZGl0Jykuc3VibWl0KGZ1bmN0aW9uKCkge30pO1xuICAgIH07XG5cbiAgICByZXR1cm4gVXNlckVkaXRDb250cm9sbGVyO1xuXG4gIH0pKCk7XG5cbiAgbm9iai5hZGRBY3Rpb25IYW5kbGVyKG5ldyBBZGRCb29rQWN0aW9uSGFuZGxlcigpKTtcblxuICBub2JqLmFkZEFjdGlvbkhhbmRsZXIobmV3IERlbEJvb2tBY3Rpb25IYW5kbGVyKCkpO1xuXG4gIGV4cG9ydHMuVXNlckVkaXRDb250cm9sbGVyID0gVXNlckVkaXRDb250cm9sbGVyO1xuXG59KS5jYWxsKHRoaXMpO1xuXG59KSgpIl19
;