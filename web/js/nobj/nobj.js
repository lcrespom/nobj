// Generated by CoffeeScript 1.6.3
(function() {
  define(['./data'], function(data) {
    var DeleteActionHandler, EditActionHandler, actionHandlers, addActionHandler, global;
    global = this;
    actionHandlers = [];
    EditActionHandler = (function() {
      function EditActionHandler() {}

      EditActionHandler.prototype.actionMask = '$edit';

      EditActionHandler.prototype.getHTML = function(collection) {
        return '<a class="editLink" href="#' + collection + '/edit">Edit</a>';
      };

      EditActionHandler.prototype.subscribe = function(collection, domNode, item) {
        return $('a.editLink', domNode).click(function() {
          return global.nobj.collections[collection].current = item;
        });
      };

      return EditActionHandler;

    })();
    DeleteActionHandler = (function() {
      function DeleteActionHandler() {}

      DeleteActionHandler.prototype.actionMask = '$delete';

      DeleteActionHandler.prototype.getHTML = function(collection) {
        return '<a class="delLink" href="">Delete</a>';
      };

      DeleteActionHandler.prototype.subscribe = function(collection, domNode, item) {
        return $('a.delLink', domNode).click(function() {
          data["delete"](collection, item._id).done(function(result) {
            var node;
            alert('Item deleted: ' + result.result);
            node = domNode.get(0);
            while (node.nodeName !== 'TR') {
              node = node.parentElement;
            }
            return $(node).remove();
          }).fail(function(err) {
            return alert('Error: ' + err);
          });
          return false;
        });
      };

      return DeleteActionHandler;

    })();
    addActionHandler = function(actionHandler) {
      return actionHandlers.push(actionHandler);
    };
    addActionHandler(new EditActionHandler());
    addActionHandler(new DeleteActionHandler());
    return {
      fillTable: function(collection, items, table, rowcb) {
        var cellNode, colInfo, colInfos, field, handler, handlers, head, headNode, heads, i, item, mask, replaced, rowNode, rows, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _results;
        heads = $('thead tr th', table);
        colInfos = [];
        for (i = _i = 0, _len = heads.length; _i < _len; i = ++_i) {
          head = heads[i];
          headNode = $(head);
          field = headNode.attr('data-nobj-field');
          if (field) {
            colInfos.push({
              field: field
            });
          } else {
            mask = headNode.attr('data-nobj-actions');
            if (mask) {
              _ref = this.processHandlers(collection, mask), replaced = _ref[0], handlers = _ref[1];
              colInfos.push({
                html: replaced,
                handlers: handlers
              });
            } else {
              colInfos.push({});
            }
          }
        }
        rows = $('tbody', table);
        _results = [];
        for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
          item = items[_j];
          rowNode = $('<tr/>');
          for (_k = 0, _len2 = colInfos.length; _k < _len2; _k++) {
            colInfo = colInfos[_k];
            cellNode = $('<td/>');
            if (colInfo.field) {
              cellNode.append(item[colInfo.field] || '');
            } else if (colInfo.handlers) {
              cellNode.append(colInfo.html);
              _ref1 = colInfo.handlers;
              for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
                handler = _ref1[_l];
                handler.subscribe(collection, cellNode, item);
              }
            }
            rowNode.append(cellNode);
          }
          if (typeof rowcb === "function") {
            rowcb(item, rowNode);
          }
          _results.push(rows.append(rowNode));
        }
        return _results;
      },
      obj2form: function(obj, form) {
        var input, jqInput, value, _i, _len, _ref, _results;
        _ref = $('[name]', form);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          jqInput = $(input);
          value = obj[jqInput.attr('name')];
          if (value) {
            _results.push(jqInput.val(value));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      post: function(form, collection) {
        return data.post(collection, form.serialize());
      },
      put: function(form, collection) {
        var putData;
        putData = form.serialize();
        return data.put(collection, putData);
      },
      addActionHandler: addActionHandler,
      processHandlers: function(collection, mask) {
        var handler, handlers, _i, _len;
        handlers = [];
        for (_i = 0, _len = actionHandlers.length; _i < _len; _i++) {
          handler = actionHandlers[_i];
          if (mask.indexOf(handler.actionMask) >= 0) {
            mask = mask.replace(handler.actionMask, handler.getHTML(collection));
            handlers.push(handler);
          }
        }
        return [mask, handlers];
      }
    };
  });

}).call(this);
