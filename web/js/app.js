;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var controllers, nav, userEditChain, users;

  nav = require('./nobj/nav');

  controllers = require('./nobj/controllers');

  users = require('./users');

  if (!window.console) {
    window.console = {
      log: function() {},
      warn: function() {},
      error: function() {}
    };
  }

  controllers.addCollection('books');

  controllers.addCollection('users');

  userEditChain = new controllers.ChainController([new users.UserEditController(), controllers.getController('users/edit')]);

  controllers.setController('users/edit', userEditChain);

  nav.getController = controllers.getController;

  nav.setNavigationArea('navArea', 'collections');

  $(function() {
    return nav.loadDefaultView();
  });

}).call(this);

},{"./nobj/controllers":2,"./nobj/nav":4,"./users":6}],2:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
(function() {
  var ChainController, CreatingController, ListingController, UpdatingController, controllers, data, global, nobj;

  nobj = require('./nobj');

  data = require('./data');

  global = this;

  controllers = {};

  CreatingController = (function() {
    function CreatingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    CreatingController.prototype.afterLoad = function() {
      var form,
        _this = this;
      form = $(this.query);
      return form.submit(function() {
        nobj.post(form, _this.collection).done(function() {
          return alert('New item added');
        }).fail(function() {
          return alert('Error while adding item');
        });
        return false;
      });
    };

    return CreatingController;

  })();

  UpdatingController = (function() {
    function UpdatingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    UpdatingController.prototype.afterLoad = function() {
      var form,
        _this = this;
      form = $(this.query);
      nobj.obj2form(global.nobj.collections[this.collection].current, form);
      return form.submit(function() {
        nobj.put(form, _this.collection).done(function() {
          return alert('Item Saved');
        }).fail(function() {
          return alert('Error while updating item');
        });
        return false;
      });
    };

    return UpdatingController;

  })();

  ListingController = (function() {
    function ListingController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    ListingController.prototype.afterLoad = function() {
      var _this = this;
      return data.get(this.collection).done(function(result) {
        return nobj.fillTable(_this.collection, result.items, $(_this.query));
      }).fail(function(err) {
        return alert('Error: ' + err);
      });
    };

    return ListingController;

  })();

  ChainController = (function() {
    function ChainController(controllers) {
      this.controllers = controllers;
    }

    ChainController.prototype.beforeLoad = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.beforeLoad === "function" ? controller.beforeLoad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.afterLoad = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.afterLoad === "function" ? controller.afterLoad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.beforeUnload = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.beforeUnlad === "function" ? controller.beforeUnlad() : void 0);
      }
      return _results;
    };

    ChainController.prototype.afterUnload = function() {
      var controller, _i, _len, _ref, _results;
      _ref = this.controllers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _results.push(typeof controller.afterUnload === "function" ? controller.afterUnload() : void 0);
      }
      return _results;
    };

    return ChainController;

  })();

  module.exports = {
    addCollection: function(collection) {
      global.nobj = global.nobj || {};
      global.nobj.collections = global.nobj.collections || {};
      global.nobj.collections[collection] = {};
      controllers[collection + '/list'] = new ListingController(collection, "#" + collection + "_list");
      controllers[collection + '/edit'] = new UpdatingController(collection, "#" + collection + "_edit");
      return controllers[collection + '/new'] = new CreatingController(collection, "#" + collection + "_new");
    },
    getController: function(viewId) {
      return controllers[viewId];
    },
    setController: function(viewId, controller) {
      return controllers[viewId] = controller;
    },
    ListingController: ListingController,
    UpdatingController: UpdatingController,
    CreatingController: CreatingController,
    ChainController: ChainController
  };

}).call(this);

})()
},{"./data":3,"./nobj":5}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var ajax;

  ajax = function(collection, method, data) {
    var deferred;
    deferred = $.Deferred();
    data = data || {};
    if (data.constructor === String) {
      data += "&_method=" + method;
    } else {
      data._method = method;
    }
    $.ajax({
      type: 'POST',
      url: "/data/" + collection,
      data: data
    }).done(function(result) {
      if (result.err) {
        return deferred.reject(result.err);
      } else {
        return deferred.resolve(result);
      }
    }).fail(function(result) {
      return deferred.reject(result);
    });
    return deferred.promise();
  };

  module.exports = {
    get: function(collection) {
      return ajax(collection, 'get');
    },
    put: function(collection, putData) {
      return ajax(collection, 'put', putData);
    },
    post: function(collection, postData) {
      return ajax(collection, 'post', postData);
    },
    "delete": function(collection, oid) {
      var delData;
      delData = {
        _id: oid
      };
      return ajax(collection, 'delete', delData);
    }
  };

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var handleHistory, nav;

  nav = {
    oldViewId: '',
    navArea: null,
    history: {},
    setNavigationArea: function(elementId, defaultViewId) {
      return this.navArea = {
        id: elementId,
        defaultViewId: defaultViewId
      };
    },
    loadDefaultView: function() {
      return this.loadView(nav.navArea.defaultViewId);
    },
    loadView: function(viewId) {
      var oldController, url, _ref,
        _this = this;
      oldController = this.controller;
      this.controller = typeof this.getController === "function" ? this.getController(viewId) : void 0;
      if (!this.controller) {
        console.warn("No controller found for view '" + viewId + "'");
      }
      if (oldController != null) {
        if (typeof oldController.beforeUnload === "function") {
          oldController.beforeUnload(this.oldViewId);
        }
      }
      if ((_ref = this.controller) != null) {
        if (typeof _ref.beforeLoad === "function") {
          _ref.beforeLoad(viewId);
        }
      }
      url = viewId + '.html';
      return $('#' + this.navArea.id).load(url, function(text, status) {
        var _ref1;
        console.log('Loaded', url, '- status:', status);
        if (oldController != null) {
          if (typeof oldController.afterUnload === "function") {
            oldController.afterUnload(_this.oldViewId);
          }
        }
        if ((_ref1 = _this.controller) != null) {
          if (typeof _ref1.afterLoad === "function") {
            _ref1.afterLoad(viewId);
          }
        }
        return _this.oldViewId = viewId;
      });
    }
  };

  handleHistory = function(loc) {
    var navArea;
    navArea = nav.history[loc];
    if (navArea) {
      return nav.navArea = navArea;
    } else {
      return nav.history[loc] = nav.navArea;
    }
  };

  window.onhashchange = function() {
    var viewId;
    console.log('Hash changed to ' + location.hash);
    if (!nav.navArea) {
      console.error('Navigation module has not been initialized');
    }
    handleHistory(location.hash);
    if (location.hash.length <= 0) {
      viewId = nav.navArea.defaultViewId;
    } else {
      viewId = location.hash.substring(1);
    }
    return nav.loadView(viewId);
  };

  module.exports = nav;

}).call(this);

},{}],5:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
(function() {
  var DeleteActionHandler, EditActionHandler, actionHandlers, addActionHandler, data, getParentNode, global;

  data = require('./data');

  EditActionHandler = (function() {
    function EditActionHandler() {}

    EditActionHandler.prototype.actionMask = '$edit';

    EditActionHandler.prototype.getHTML = function(collection) {
      return '<a class="editLink" href="#' + collection + '/edit">Edit</a>';
    };

    EditActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.editLink', domNode).click(function() {
        return global.nobj.collections[collection].current = item;
      });
    };

    return EditActionHandler;

  })();

  DeleteActionHandler = (function() {
    function DeleteActionHandler() {}

    DeleteActionHandler.prototype.actionMask = '$delete';

    DeleteActionHandler.prototype.getHTML = function(collection) {
      return '<a class="delLink" href="">Delete</a>';
    };

    DeleteActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.delLink', domNode).click(function() {
        data["delete"](collection, item._id).done(function(result) {
          alert('Item deleted: ' + result.result);
          return $(getParentNode(domNode.get(0), 'TR')).remove();
        }).fail(function(err) {
          return alert('Error: ' + err);
        });
        return false;
      });
    };

    return DeleteActionHandler;

  })();

  global = this;

  actionHandlers = [];

  getParentNode = function(node, parentNodeName) {
    while (node && node.nodeName !== parentNodeName) {
      node = node.parentElement;
    }
    return node;
  };

  addActionHandler = function(actionHandler) {
    return actionHandlers.push(actionHandler);
  };

  addActionHandler(new EditActionHandler());

  addActionHandler(new DeleteActionHandler());

  module.exports = {
    parseTableHeaders: function(collection, table) {
      var colInfos, field, handlers, head, headNode, heads, i, mask, replaced, _i, _len, _ref;
      heads = $('thead tr th', table);
      colInfos = [];
      for (i = _i = 0, _len = heads.length; _i < _len; i = ++_i) {
        head = heads[i];
        headNode = $(head);
        field = headNode.attr('data-nobj-field');
        if (field) {
          colInfos.push({
            field: field
          });
        } else {
          mask = headNode.attr('data-nobj-actions');
          if (mask) {
            _ref = this.processHandlers(collection, mask), replaced = _ref[0], handlers = _ref[1];
            colInfos.push({
              html: replaced,
              handlers: handlers
            });
          } else {
            colInfos.push({});
          }
        }
      }
      return colInfos;
    },
    buildTableRow: function(collection, item, colInfos) {
      var cellNode, colInfo, handler, rowNode, _i, _j, _len, _len1, _ref;
      rowNode = $('<tr/>');
      for (_i = 0, _len = colInfos.length; _i < _len; _i++) {
        colInfo = colInfos[_i];
        cellNode = $('<td/>');
        if (colInfo.field) {
          cellNode.append(item[colInfo.field] || '');
        } else if (colInfo.handlers) {
          cellNode.append(colInfo.html);
          _ref = colInfo.handlers;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            handler = _ref[_j];
            handler.subscribe(collection, cellNode, item);
          }
        }
        rowNode.append(cellNode);
      }
      return rowNode;
    },
    fillTable: function(collection, items, table, rowcb) {
      var colInfos, item, rowNode, rows, _i, _len, _results;
      colInfos = this.parseTableHeaders(collection, table);
      rows = $('tbody', table);
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        rowNode = this.buildTableRow(collection, item, colInfos);
        if (typeof rowcb === "function") {
          rowcb(item, rowNode);
        }
        _results.push(rows.append(rowNode));
      }
      return _results;
    },
    obj2form: function(obj, form) {
      var input, jqInput, value, _i, _len, _ref, _results;
      _ref = $('[name]', form);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        jqInput = $(input);
        value = obj[jqInput.attr('name')];
        if (value) {
          _results.push(jqInput.val(value));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    post: function(form, collection) {
      return data.post(collection, form.serialize());
    },
    put: function(form, collection) {
      return data.put(collection, form.serialize());
    },
    addActionHandler: addActionHandler,
    getParentNode: getParentNode,
    processHandlers: function(collection, mask) {
      var handler, handlers, _i, _len;
      handlers = [];
      for (_i = 0, _len = actionHandlers.length; _i < _len; _i++) {
        handler = actionHandlers[_i];
        if (mask.indexOf(handler.actionMask) >= 0) {
          mask = mask.replace(handler.actionMask, handler.getHTML(collection));
          handlers.push(handler);
        }
      }
      return [mask, handlers];
    }
  };

}).call(this);

})()
},{"./data":3}],6:[function(require,module,exports){
(function(){// Generated by CoffeeScript 1.6.3
(function() {
  var AddBookActionHandler, DelBookActionHandler, UserEditController, arrayContainsElement, data, global, nobj, removeArrayElement, reservedColInfo, reservedTbody, user;

  nobj = require('./nobj/nobj');

  data = require('./nobj/data');

  global = this;

  reservedColInfo = null;

  user = null;

  reservedTbody = null;

  removeArrayElement = function(a, e) {
    var elem, ret, _i, _len;
    ret = [];
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      elem = a[_i];
      if (elem !== e) {
        ret.push(elem);
      }
    }
    return ret;
  };

  arrayContainsElement = function(a, e) {
    var elem, _i, _len;
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      elem = a[_i];
      if (elem === e) {
        return true;
      }
    }
    return false;
  };

  AddBookActionHandler = (function() {
    function AddBookActionHandler() {}

    AddBookActionHandler.prototype.actionMask = '$add-book';

    AddBookActionHandler.prototype.getHTML = function(collection) {
      return '<a class="addLink" href="#">Reserve</a>';
    };

    AddBookActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.addLink', domNode).click(function() {
        if (arrayContainsElement(user.books, item._id)) {
          return false;
        }
        user.books.push(item._id);
        reservedTbody.append(nobj.buildTableRow(collection, item, reservedColInfo));
        return false;
      });
    };

    return AddBookActionHandler;

  })();

  DelBookActionHandler = (function() {
    function DelBookActionHandler() {}

    DelBookActionHandler.prototype.actionMask = '$del-book';

    DelBookActionHandler.prototype.getHTML = function(collection) {
      return '<a class="delLink" href="#">Remove</a>';
    };

    DelBookActionHandler.prototype.subscribe = function(collection, domNode, item) {
      return $('a.delLink', domNode).click(function() {
        user.books = removeArrayElement(user.books, item._id);
        $(nobj.getParentNode(domNode.get(0), 'TR')).remove();
        return false;
      });
    };

    return DelBookActionHandler;

  })();

  UserEditController = (function() {
    function UserEditController(collection, query) {
      this.collection = collection;
      this.query = query;
    }

    UserEditController.prototype.afterLoad = function() {
      user = global.nobj.collections.users.current;
      user.books = user.books || [];
      reservedColInfo = nobj.parseTableHeaders('books', $('#reserved_books_list'));
      reservedTbody = $('#reserved_books_list tbody');
      data.get('books').done(function(result) {
        return nobj.fillTable('books', result.items, $('#books_list'));
      }).fail(function(err) {
        return alert('Error: ' + err);
      });
      return $('#users_edit').submit(function() {});
    };

    return UserEditController;

  })();

  nobj.addActionHandler(new AddBookActionHandler());

  nobj.addActionHandler(new DelBookActionHandler());

  exports.UserEditController = UserEditController;

}).call(this);

})()
},{"./nobj/data":3,"./nobj/nobj":5}]},{},[1])
;