// Generated by CoffeeScript 1.6.3
(function() {
  define(['data', 'nobj'], function(data, nobj) {
    var afterBooksLoad, afterEditLoad, afterNewLoad, global;
    global = this;
    afterBooksLoad = function() {
      var fillTable, registerActions;
      registerActions = function(row, book) {
        $('a.editLink', row).click(function() {
          return global.books.current = book;
        });
        return $('a.delLink', row).click(function() {
          data["delete"]('books', book._id).done(function(result) {
            alert('Book deleted: ' + result);
            return row.remove();
          }).fail(function(err) {
            return alert('Error: ' + err);
          });
          return false;
        });
      };
      fillTable = function() {
        return data.get('books').done(function(result) {
          return nobj.fillTable(result.items, $('#books'), function(book, row) {
            var actions;
            actions = '<a class=\'editLink\' href=\'#edit\'>Edit</a>';
            actions += ' / <a class=\'delLink\' href=\'\'>Delete</a>';
            $('td:nth-child(3)', row).append(actions);
            return registerActions(row, book);
          });
        }).fail(function(err) {
          return alert('Error: ' + err);
        });
      };
      return fillTable();
    };
    afterEditLoad = function() {
      var form;
      form = $('#book_edit');
      nobj.obj2form(global.books.current, form);
      return form.submit(function() {
        nobj.put(form, 'books').done(function() {
          return alert('Data Saved');
        }).fail(function() {
          return alert('Error while saving data');
        });
        return false;
      });
    };
    afterNewLoad = function() {
      var form;
      form = $('#book_new');
      return form.submit(function() {
        nobj.post(form, 'books').done(function() {
          return alert('New book added');
        }).fail(function() {
          return alert('Error while saving data');
        });
        return false;
      });
    };
    return {
      books: {
        afterLoad: afterBooksLoad
      },
      edit: {
        afterLoad: afterEditLoad
      },
      "new": {
        afterLoad: afterNewLoad
      }
    };
  });

}).call(this);
